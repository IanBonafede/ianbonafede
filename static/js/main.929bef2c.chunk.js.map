{"version":3,"sources":["Home.js","Bio.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","style","backgroundColor","React","Component","Bio","Projects","MuiTheme","createMuiTheme","palette","primary","light","main","dark","contrastText","useStyles","makeStyles","theme","AppBar","background","color","Icons","App","classes","position","Toolbar","Button","edge","Typography","variant","href","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAwBeA,E,kDApBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,GAFH,E,qDAUV,OACI,yBAAKC,MAAO,CAACC,gBAAiB,SAC1B,yC,GAbGC,IAAMC,WCgBVC,E,kDAhBX,aAAe,IAAD,8BACV,gBACKL,MAAQ,GAFH,E,qDAUV,OACI,uC,GAZMG,IAAMC,WCiBTE,E,kDAhBX,aAAe,IAAD,8BACV,gBACKN,MAAQ,GAFH,E,qDAUV,OACI,4C,GAZWG,IAAMC,W,2ICgBvBG,EAAWC,YAAe,CAC9BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAKdC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,WAAYZ,EAASE,QAAQC,QAAQE,KACrCQ,MAAOb,EAASE,QAAQC,QAAQI,cAGlCO,MAAO,CACLD,MAAOb,EAASE,QAAQC,QAAQI,kBAiDrBQ,MA7Cf,WAEE,IAAMC,EAAUR,IAOhB,OACI,oCACI,6BACE,kBAACG,EAAA,EAAD,CAAQM,SAAS,SAASvB,MAAOsB,EAAQL,QACvC,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAQ,kBAAC,IAAD,CAAU1B,MAAO,CAAEmB,MAAOb,EAASE,QAAQC,QAAQI,iBACxE,kBAACc,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAGA,kBAACH,EAAA,EAAD,CAAQI,KAAK,mBAAmB,kBAAC,IAAD,CAAU7B,MAAO,CAAEmB,MAAOb,EAASE,QAAQC,QAAQI,iBACnF,kBAACY,EAAA,EAAD,CAAQI,KAAK,sBAAqB,kBAAC,IAAD,CAAmB7B,MAAO,CAAEmB,MAAOb,EAASE,QAAQC,QAAQI,iBAC9F,kBAACY,EAAA,EAAD,CAAQI,KAAK,2BAA0B,kBAAC,IAAD,CAAkB7B,MAAO,CAAEmB,MAAOb,EAASE,QAAQC,QAAQI,oBAKxG,kBAAC,IAAD,CAAYiB,SAAQ,UAAKC,iBACvB,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,OAAOC,UAAW9B,IACpC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,YAAYC,UAAW7B,QC3DnC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.929bef2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n\r\n    render() {\r\n        return (\r\n            <div style={{backgroundColor: 'blue'}}>\r\n                <h1>Home</h1>\r\n            </div>\r\n            \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nclass Bio extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n\r\n    render() {\r\n        return (\r\n            <h1>Bio</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bio","import React from 'react'\r\n\r\nclass Projects extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n\r\n    render() {\r\n        return (\r\n            <h1>Projects</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects","import React from 'react';\nimport './App.css';\nimport Home from \"./Home\"\nimport Bio from \"./Bio\"\nimport Projects from \"./Projects\"\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport 'fontsource-roboto';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\n\nconst MuiTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#A3A3A3',\n      main: '#828282',\n      dark: '#686868',\n      contrastText: '#fff',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  AppBar: {\n    background: MuiTheme.palette.primary.main,\n    color: MuiTheme.palette.primary.contrastText\n  },\n\n  Icons: {\n    color: MuiTheme.palette.primary.contrastText\n  }\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n\n  \n\n  \n\n\n  return (\n      <>\n          <div /*className={classes.root}*/>\n            <AppBar position=\"static\" style={classes.AppBar}>\n              <Toolbar >\n                <Button edge=\"start\"><MenuIcon style={{ color: MuiTheme.palette.primary.contrastText }}/></Button>\n                <Typography variant=\"h6\" /*className={classes.title}*/>\n                  Ian Bonafede\n                </Typography>\n                <Button href=\"/ianbonafede/#/\" ><HomeIcon style={{ color: MuiTheme.palette.primary.contrastText }}/></Button>\n                <Button href=\"/ianbonafede/#/bio\"><AccountCircleIcon style={{ color: MuiTheme.palette.primary.contrastText }}/></Button>\n                <Button href=\"/ianbonafede/#/projects\"><LibraryBooksIcon style={{ color: MuiTheme.palette.primary.contrastText }}/></Button>\n              </Toolbar>\n            </AppBar>\n          </div>\n\n          <HashRouter basename={`${process.env.PUBLIC_URL}`}>\n            <Switch>\n\n            \n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/bio\" component={Bio}/>\n              <Route exact path=\"/Projects\" component={Projects}/>\n              \n            </Switch>\n          </HashRouter>\n      </>\n\n  );\n  \n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}