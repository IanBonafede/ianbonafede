{"version":3,"sources":["Home.js","Bio.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","theme","light","main","dark","contrastText","React","Component","Bio","Projects","MuiTheme","createMuiTheme","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","list","width","fullList","App","classes","document","body","style","useState","top","left","bottom","right","setState","toggleDrawer","anchor","open","event","type","key","className","AppBar","position","background","padding","Toolbar","map","Fragment","Button","onClick","color","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","ListItem","Divider","text","index","button","ListItemText","primary","Typography","variant","href","Container","backgroundColor","maxWidth","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10d2f923.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            theme : {\r\n                light: '#A3A3A3',\r\n                main: '#828282',\r\n                dark: '#686868',\r\n                contrastText: '#fff'\r\n            }\r\n        }\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <h1>Home</h1>\r\n            \r\n            \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nclass Bio extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n\r\n    render() {\r\n        return (\r\n            <h1>Bio</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bio","import React from 'react'\r\n\r\nclass Projects extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n        //this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //handleClick(event) {}\r\n\r\n    render() {\r\n        return (\r\n            <h1>Projects</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects","import React from 'react';\nimport clsx from 'clsx';\nimport './App.css';\nimport Home from \"./Home\"\nimport Bio from \"./Bio\"\nimport Projects from \"./Projects\"\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport { Container } from '@material-ui/core';\nimport 'fontsource-roboto';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\n//import ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst MuiTheme = createMuiTheme({\n    light: '#A3A3A3',\n    main: '#828282',\n    dark: '#686868',\n    contrastText: '#fff'\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n\n  \n  document.body.style = 'background: #686868;';\n\n \n    const [state, setState] = React.useState({\n      top: false,\n      left: false,\n      bottom: false,\n      right: false,\n    });\n  \n    const toggleDrawer = (anchor, open) => (event) => {\n      if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n        return;\n      }\n  \n      setState({ ...state, [anchor]: open });\n    };\n  \n    const list = (anchor) => (\n      <div\n        className={clsx(classes.list, {\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n        })}\n        role=\"presentation\"\n        onClick={toggleDrawer(anchor, false)}\n        onKeyDown={toggleDrawer(anchor, false)}\n      >\n        <List style={{ background: MuiTheme.main }}>\n            <ListItem >Social</ListItem>\n            <Divider></Divider>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n  return (\n      <>\n          <div className={classes.root}>\n            <AppBar position=\"static\" style={{ background: MuiTheme.main, padding: 0 }}>\n              <Toolbar >\n              {['left'].map((anchor) => (\n                <React.Fragment key={anchor}>\n                  <Button onClick={toggleDrawer(anchor, true)}><MenuIcon style={{ color: MuiTheme.contrastText }}/></Button>\n                  <SwipeableDrawer\n                    style={{ background: MuiTheme.main }}\n                    anchor={anchor}\n                    open={state[anchor]}\n                    onClose={toggleDrawer(anchor, false)}\n                    onOpen={toggleDrawer(anchor, true)}\n                  >\n                    {list(anchor)}\n                  </SwipeableDrawer>\n                </React.Fragment>\n              ))}\n                \n                <Typography variant=\"h6\" className={classes.title}>\n                  Ian Bonafede\n                </Typography>\n                <Button href=\"/ianbonafede/#/\" ><HomeIcon style={{ color: MuiTheme.contrastText }}/></Button>\n                <Button href=\"/ianbonafede/#/bio\"><AccountCircleIcon style={{ color: MuiTheme.contrastText }}/></Button>\n                <Button href=\"/ianbonafede/#/projects\"><LibraryBooksIcon style={{ color: MuiTheme.contrastText }}/></Button>\n              </Toolbar>\n            </AppBar>\n          </div>\n          <Container style={{backgroundColor: MuiTheme.main}} maxWidth=\"lg\">\n              <HashRouter basename={`${process.env.PUBLIC_URL}`} >\n                <Switch>\n\n                \n                  <Route exact path=\"/\" component={Home}/>\n                  <Route exact path=\"/bio\" component={Bio}/>\n                  <Route exact path=\"/Projects\" component={Projects}/>\n                  \n                </Switch>\n              </HashRouter>\n          </Container>\n          \n      </>\n\n  );\n  \n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}